// Open the file that defines the type "expr" we shall use as AST
%{
open Task1TypesAST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> VAR
%token ARROW DOUBLEBRACKETS
%token VARIABLE ASSIGN SEMICOLON IFSTART IFEND DOSTART DOEND 
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF
%token AND OR SAND SOR NEG EQUAL NEQUAL GT GEQ LT LEQ TRUE FALSE
%token SKIP LBRA RBRA

// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// C ::= x := a | A[a] := a | skip | C ; C | if GC fi | do GC od
// GC ::= b -> C | GC [] GC
// a ::= n | x | A[a] | a + a | a - a | a * a | a / a | - a | a ^ a | (a)
// b ::= true | false | b & b | b | b | b && b | b || b | !b
//			  | a = a | a != a | a > a | a >= a | a < a | a <= a | (b)

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%right DOUBLEBRACKETS SEMICOLON
%right ASSIGN
%left SOR OR
%left SAND AND
%left EQUAL NEQUAL
%left LT LEQ
%left GT GEQ
%right NEG
%left PLUS MINUS
%left TIMES DIV
%right POW
%right LPAR
%left RPAR


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <command> start
%type <aexpr> aexpression
%type <bexpr> bexpression
%type <gcommand> gc
%type <command> command

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: command EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

gc:
  | bexpression ARROW command		{ BooleanGuard($1,$3) }
  | gc DOUBLEBRACKETS gc			{ GCommands($1,$3) }

command:
  | VAR ASSIGN aexpression							{ AssignExpr($1,$3) }
  | VAR LBRA aexpression RBRA ASSIGN aexpression	{ AssignArray($1, $3, $6) }
  | SKIP											{ Skip }
  | command SEMICOLON command						{ Commands($1,$3) }
  | IFSTART gc IFEND								{ IfStatement($2) }
  | DOSTART gc DOEND								{ DoStatement($2) }

bexpression:
  | TRUE							{ True }
  | FALSE							{ False }
  | bexpression AND bexpression		{ And($1,$3) }
  | bexpression OR bexpression		{ Or($1,$3) }
  | bexpression SAND bexpression	{ SAnd($1,$3) }
  | bexpression SOR bexpression		{ SOr($1,$3) }
  | NEG bexpression					{ Neg($2) }
  | aexpression EQUAL aexpression   { Equal($1,$3) }
  | aexpression NEQUAL aexpression  { NEqual($1,$3) }
  | aexpression GT aexpression      { Greater($1,$3) }
  | aexpression GEQ aexpression     { GreaterEqual($1,$3) }
  | aexpression LT aexpression      { Less($1,$3) }
  | aexpression LEQ aexpression     { LessEqual($1,$3) }
  | LPAR bexpression RPAR			{ ParBExpr($2) }

aexpression:
  | NUM								{ Num($1) }
  | VAR								{ Var($1) }
  | VAR LBRA aexpression RBRA		{ Array($1, $3) }
  | aexpression PLUS aexpression    { PlusExpr($1,$3) }
  | aexpression MINUS aexpression   { MinusExpr($1,$3) }
  | aexpression TIMES aexpression   { TimesExpr($1,$3) }
  | aexpression DIV aexpression     { DivExpr($1,$3) }
  | aexpression POW aexpression     { PowExpr($1,$3) }
  | PLUS aexpression				{ UPlusExpr($2) }
  | MINUS aexpression				{ UMinusExpr($2) }
  | LPAR aexpression RPAR			{ ParAExpr($2) }

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
