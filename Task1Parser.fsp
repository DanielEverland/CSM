// Open the file that defines the type "expr" we shall use as AST
%{
open Task1TypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// C ::= x := a | A[a] := a | skip | C ; C | if GC fi | do GC od
// GC ::= b -> C | GC [] GC
// a ::= n | x | A[a] | a + a | a - a | a * a | a / a | - a | a ^ a | (a)
// b ::= true | false | b & b | b | b | b && b | b || b | !b
//			  | a = a | a != a | a > a | a >= a | a < a | a <= a | (b)

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
// %left PLUS MINUS
// %left TIMES DIV
// %right POW


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <expr> start
%type <expr> expression0
%type <expr> expression1
%type <expr> expression2
%type <expr> expression3

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: expression0 EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

gc:
  | bexpr ARROW command { BooleanGuard($1,$3) }
  | gc DOUBLEBRACKETS gc { GCommands($1,$3) }

command:
	| VARIABLE ASSIGN a { AssignExpr($1,$3) }
  | ARRAY a ASSIGN a 
  | command SEMICOLON command { Commands($1,$3) }
  | IFSTART gc IFEND { IfStatement($2) }
  | DOSTART gc DOEND { DoStatement($2) }

bexpr:
  | TRUE              { True }
  | FALSE             { False }
  | bexpr AND bexpr   { And($1,$3) }
  | bexpr OR bexpr    { Or($1,$3) }
  | bexpr SAND bexpr  { SAnd($1,$3) }
  | bexpr SOR bexpr   { SOr($1,$3) }
  | NEG bexpr         { Neg($2) }
  | a EQUAL a         { Equal($1,$3) }
  | a NEQUAL a        { NEqual($1,$3) }

a:
  | a PLUS a1     { PlusExpr($1,$3) }
  | a MINUS a1    { MinusExpr($1,$3) }
  | a1					  { $1 }

a1:
  | a1 TIMES a2   { TimesExpr($1,$3) }
  | a1 DIV a2     { DivExpr($1,$3) }
  | a2					  { $1 }

a2:
  | a3 POW a2     { PowExpr($1,$3) }
  | a3					  { $1 }

a3:
  | PLUS a3       { UPlusExpr($2) }
  | MINUS a3      { UMinusExpr($2) }
  | LPAR a0 RPAR  { $2 }
  | NUM						{ Num($1) }

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
