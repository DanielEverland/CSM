// Implementation file for parser generated by fsyacc
module Task1Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"

open Task1TypesAST

# 10 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | SKIP
  | LBRA
  | RBRA
  | AND
  | OR
  | SAND
  | SOR
  | NEG
  | EQUAL
  | NEQUAL
  | GT
  | GEQ
  | LT
  | LEQ
  | TRUE
  | FALSE
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | VARIABLE
  | ASSIGN
  | SEMICOLON
  | IFSTART
  | IFEND
  | DOSTART
  | DOEND
  | ARROW
  | DOUBLEBRACKETS
  | VAR of (string)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_SKIP
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_SAND
    | TOKEN_SOR
    | TOKEN_NEG
    | TOKEN_EQUAL
    | TOKEN_NEQUAL
    | TOKEN_GT
    | TOKEN_GEQ
    | TOKEN_LT
    | TOKEN_LEQ
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_VARIABLE
    | TOKEN_ASSIGN
    | TOKEN_SEMICOLON
    | TOKEN_IFSTART
    | TOKEN_IFEND
    | TOKEN_DOSTART
    | TOKEN_DOEND
    | TOKEN_ARROW
    | TOKEN_DOUBLEBRACKETS
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_gc
    | NONTERM_command
    | NONTERM_bexpression
    | NONTERM_aexpression

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | SKIP  -> 0 
  | LBRA  -> 1 
  | RBRA  -> 2 
  | AND  -> 3 
  | OR  -> 4 
  | SAND  -> 5 
  | SOR  -> 6 
  | NEG  -> 7 
  | EQUAL  -> 8 
  | NEQUAL  -> 9 
  | GT  -> 10 
  | GEQ  -> 11 
  | LT  -> 12 
  | LEQ  -> 13 
  | TRUE  -> 14 
  | FALSE  -> 15 
  | TIMES  -> 16 
  | DIV  -> 17 
  | PLUS  -> 18 
  | MINUS  -> 19 
  | POW  -> 20 
  | LPAR  -> 21 
  | RPAR  -> 22 
  | EOF  -> 23 
  | VARIABLE  -> 24 
  | ASSIGN  -> 25 
  | SEMICOLON  -> 26 
  | IFSTART  -> 27 
  | IFEND  -> 28 
  | DOSTART  -> 29 
  | DOEND  -> 30 
  | ARROW  -> 31 
  | DOUBLEBRACKETS  -> 32 
  | VAR _ -> 33 
  | NUM _ -> 34 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_SKIP 
  | 1 -> TOKEN_LBRA 
  | 2 -> TOKEN_RBRA 
  | 3 -> TOKEN_AND 
  | 4 -> TOKEN_OR 
  | 5 -> TOKEN_SAND 
  | 6 -> TOKEN_SOR 
  | 7 -> TOKEN_NEG 
  | 8 -> TOKEN_EQUAL 
  | 9 -> TOKEN_NEQUAL 
  | 10 -> TOKEN_GT 
  | 11 -> TOKEN_GEQ 
  | 12 -> TOKEN_LT 
  | 13 -> TOKEN_LEQ 
  | 14 -> TOKEN_TRUE 
  | 15 -> TOKEN_FALSE 
  | 16 -> TOKEN_TIMES 
  | 17 -> TOKEN_DIV 
  | 18 -> TOKEN_PLUS 
  | 19 -> TOKEN_MINUS 
  | 20 -> TOKEN_POW 
  | 21 -> TOKEN_LPAR 
  | 22 -> TOKEN_RPAR 
  | 23 -> TOKEN_EOF 
  | 24 -> TOKEN_VARIABLE 
  | 25 -> TOKEN_ASSIGN 
  | 26 -> TOKEN_SEMICOLON 
  | 27 -> TOKEN_IFSTART 
  | 28 -> TOKEN_IFEND 
  | 29 -> TOKEN_DOSTART 
  | 30 -> TOKEN_DOEND 
  | 31 -> TOKEN_ARROW 
  | 32 -> TOKEN_DOUBLEBRACKETS 
  | 33 -> TOKEN_VAR 
  | 34 -> TOKEN_NUM 
  | 37 -> TOKEN_end_of_input
  | 35 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_gc 
    | 3 -> NONTERM_gc 
    | 4 -> NONTERM_command 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_command 
    | 8 -> NONTERM_command 
    | 9 -> NONTERM_command 
    | 10 -> NONTERM_bexpression 
    | 11 -> NONTERM_bexpression 
    | 12 -> NONTERM_bexpression 
    | 13 -> NONTERM_bexpression 
    | 14 -> NONTERM_bexpression 
    | 15 -> NONTERM_bexpression 
    | 16 -> NONTERM_bexpression 
    | 17 -> NONTERM_bexpression 
    | 18 -> NONTERM_bexpression 
    | 19 -> NONTERM_bexpression 
    | 20 -> NONTERM_bexpression 
    | 21 -> NONTERM_bexpression 
    | 22 -> NONTERM_bexpression 
    | 23 -> NONTERM_bexpression 
    | 24 -> NONTERM_aexpression 
    | 25 -> NONTERM_aexpression 
    | 26 -> NONTERM_aexpression 
    | 27 -> NONTERM_aexpression 
    | 28 -> NONTERM_aexpression 
    | 29 -> NONTERM_aexpression 
    | 30 -> NONTERM_aexpression 
    | 31 -> NONTERM_aexpression 
    | 32 -> NONTERM_aexpression 
    | 33 -> NONTERM_aexpression 
    | 34 -> NONTERM_aexpression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 37 
let _fsyacc_tagOfErrorTerminal = 35

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | SKIP  -> "SKIP" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | SAND  -> "SAND" 
  | SOR  -> "SOR" 
  | NEG  -> "NEG" 
  | EQUAL  -> "EQUAL" 
  | NEQUAL  -> "NEQUAL" 
  | GT  -> "GT" 
  | GEQ  -> "GEQ" 
  | LT  -> "LT" 
  | LEQ  -> "LEQ" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EOF  -> "EOF" 
  | VARIABLE  -> "VARIABLE" 
  | ASSIGN  -> "ASSIGN" 
  | SEMICOLON  -> "SEMICOLON" 
  | IFSTART  -> "IFSTART" 
  | IFEND  -> "IFEND" 
  | DOSTART  -> "DOSTART" 
  | DOEND  -> "DOEND" 
  | ARROW  -> "ARROW" 
  | DOUBLEBRACKETS  -> "DOUBLEBRACKETS" 
  | VAR _ -> "VAR" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | SKIP  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | SAND  -> (null : System.Object) 
  | SOR  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NEQUAL  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | VARIABLE  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | IFSTART  -> (null : System.Object) 
  | IFEND  -> (null : System.Object) 
  | DOSTART  -> (null : System.Object) 
  | DOEND  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | DOUBLEBRACKETS  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 10us; 7us; 22us; 8us; 24us; 9us; 3us; 65535us; 0us; 2us; 5us; 6us; 21us; 20us; 9us; 65535us; 10us; 4us; 22us; 4us; 24us; 4us; 34us; 28us; 35us; 29us; 36us; 30us; 37us; 31us; 38us; 32us; 53us; 33us; 27us; 65535us; 10us; 39us; 12us; 13us; 14us; 15us; 17us; 18us; 22us; 39us; 24us; 39us; 34us; 39us; 35us; 39us; 36us; 39us; 37us; 39us; 38us; 39us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 40us; 57us; 58us; 68us; 60us; 69us; 61us; 70us; 62us; 71us; 63us; 72us; 64us; 73us; 65us; 74us; 66us; 75us; 67us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 11us; 21us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 7us; 1us; 1us; 5us; 2us; 12us; 13us; 14us; 15us; 1us; 2us; 2us; 2us; 7us; 2us; 3us; 3us; 2us; 3us; 8us; 2us; 3us; 9us; 1us; 3us; 2us; 4us; 5us; 1us; 4us; 6us; 4us; 27us; 28us; 29us; 30us; 31us; 1us; 5us; 6us; 5us; 27us; 28us; 29us; 30us; 31us; 1us; 5us; 1us; 5us; 6us; 5us; 27us; 28us; 29us; 30us; 31us; 1us; 6us; 2us; 7us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 5us; 12us; 12us; 13us; 14us; 15us; 5us; 12us; 13us; 13us; 14us; 15us; 5us; 12us; 13us; 14us; 14us; 15us; 5us; 12us; 13us; 14us; 15us; 15us; 5us; 12us; 13us; 14us; 15us; 16us; 5us; 12us; 13us; 14us; 15us; 23us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 11us; 17us; 18us; 19us; 20us; 21us; 22us; 27us; 28us; 29us; 30us; 31us; 12us; 17us; 18us; 19us; 20us; 21us; 22us; 27us; 28us; 29us; 30us; 31us; 34us; 1us; 17us; 6us; 17us; 27us; 28us; 29us; 30us; 31us; 1us; 18us; 6us; 18us; 27us; 28us; 29us; 30us; 31us; 1us; 19us; 6us; 19us; 27us; 28us; 29us; 30us; 31us; 1us; 20us; 6us; 20us; 27us; 28us; 29us; 30us; 31us; 1us; 21us; 6us; 21us; 27us; 28us; 29us; 30us; 31us; 1us; 22us; 6us; 22us; 27us; 28us; 29us; 30us; 31us; 2us; 23us; 34us; 1us; 23us; 1us; 24us; 2us; 25us; 26us; 1us; 26us; 6us; 26us; 27us; 28us; 29us; 30us; 31us; 1us; 26us; 6us; 27us; 27us; 28us; 29us; 30us; 31us; 6us; 27us; 28us; 28us; 29us; 30us; 31us; 6us; 27us; 28us; 29us; 29us; 30us; 31us; 6us; 27us; 28us; 29us; 30us; 30us; 31us; 6us; 27us; 28us; 29us; 30us; 31us; 31us; 6us; 27us; 28us; 29us; 30us; 31us; 32us; 6us; 27us; 28us; 29us; 30us; 31us; 33us; 6us; 27us; 28us; 29us; 30us; 31us; 34us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 34us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 15us; 17us; 20us; 23us; 26us; 29us; 31us; 34us; 36us; 43us; 45us; 52us; 54us; 56us; 63us; 65us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 88us; 94us; 100us; 106us; 112us; 118us; 120us; 122us; 124us; 126us; 128us; 140us; 153us; 155us; 162us; 164us; 171us; 173us; 180us; 182us; 189us; 191us; 198us; 200us; 207us; 210us; 212us; 214us; 217us; 219us; 226us; 228us; 235us; 242us; 249us; 256us; 263us; 270us; 277us; 284us; 286us; 288us; 290us; 292us; 294us; 296us; 298us; 300us; |]
let _fsyacc_action_rows = 77
let _fsyacc_actionTableElements = [|4us; 32768us; 0us; 19us; 27us; 22us; 29us; 24us; 33us; 11us; 0us; 49152us; 2us; 32768us; 23us; 3us; 26us; 21us; 0us; 16385us; 5us; 32768us; 3us; 34us; 4us; 35us; 5us; 36us; 6us; 37us; 31us; 5us; 4us; 32768us; 0us; 19us; 27us; 22us; 29us; 24us; 33us; 11us; 1us; 16386us; 26us; 21us; 1us; 16387us; 32us; 10us; 2us; 32768us; 28us; 23us; 32us; 10us; 2us; 32768us; 30us; 25us; 32us; 10us; 8us; 32768us; 7us; 38us; 14us; 26us; 15us; 27us; 18us; 73us; 19us; 74us; 21us; 53us; 33us; 56us; 34us; 55us; 2us; 32768us; 1us; 14us; 25us; 12us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 16388us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 6us; 32768us; 2us; 16us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 1us; 32768us; 25us; 17us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 16389us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 0us; 16390us; 1us; 16391us; 26us; 21us; 4us; 32768us; 0us; 19us; 27us; 22us; 29us; 24us; 33us; 11us; 8us; 32768us; 7us; 38us; 14us; 26us; 15us; 27us; 18us; 73us; 19us; 74us; 21us; 53us; 33us; 56us; 34us; 55us; 0us; 16392us; 8us; 32768us; 7us; 38us; 14us; 26us; 15us; 27us; 18us; 73us; 19us; 74us; 21us; 53us; 33us; 56us; 34us; 55us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 2us; 16397us; 3us; 34us; 5us; 36us; 0us; 16398us; 2us; 16399us; 3us; 34us; 5us; 36us; 0us; 16400us; 5us; 32768us; 3us; 34us; 4us; 35us; 5us; 36us; 6us; 37us; 22us; 54us; 8us; 32768us; 7us; 38us; 14us; 26us; 15us; 27us; 18us; 73us; 19us; 74us; 21us; 53us; 33us; 56us; 34us; 55us; 8us; 32768us; 7us; 38us; 14us; 26us; 15us; 27us; 18us; 73us; 19us; 74us; 21us; 53us; 33us; 56us; 34us; 55us; 8us; 32768us; 7us; 38us; 14us; 26us; 15us; 27us; 18us; 73us; 19us; 74us; 21us; 53us; 33us; 56us; 34us; 55us; 8us; 32768us; 7us; 38us; 14us; 26us; 15us; 27us; 18us; 73us; 19us; 74us; 21us; 53us; 33us; 56us; 34us; 55us; 8us; 32768us; 7us; 38us; 14us; 26us; 15us; 27us; 18us; 73us; 19us; 74us; 21us; 53us; 33us; 56us; 34us; 55us; 11us; 32768us; 8us; 41us; 9us; 43us; 10us; 45us; 11us; 47us; 12us; 49us; 13us; 51us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 12us; 32768us; 8us; 41us; 9us; 43us; 10us; 45us; 11us; 47us; 12us; 49us; 13us; 51us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 22us; 76us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 16401us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 16402us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 16403us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 16404us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 16405us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 16406us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 8us; 32768us; 7us; 38us; 14us; 26us; 15us; 27us; 18us; 73us; 19us; 74us; 21us; 53us; 33us; 56us; 34us; 55us; 0us; 16407us; 0us; 16408us; 1us; 16409us; 1us; 57us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 6us; 32768us; 2us; 59us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 0us; 16410us; 3us; 16411us; 16us; 70us; 17us; 71us; 20us; 72us; 3us; 16412us; 16us; 70us; 17us; 71us; 20us; 72us; 1us; 16413us; 20us; 72us; 1us; 16414us; 20us; 72us; 1us; 16415us; 20us; 72us; 3us; 16416us; 16us; 70us; 17us; 71us; 20us; 72us; 3us; 16417us; 16us; 70us; 17us; 71us; 20us; 72us; 6us; 32768us; 16us; 70us; 17us; 71us; 18us; 68us; 19us; 69us; 20us; 72us; 22us; 76us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 5us; 32768us; 18us; 73us; 19us; 74us; 21us; 75us; 33us; 56us; 34us; 55us; 0us; 16418us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 16us; 21us; 23us; 25us; 28us; 31us; 40us; 43us; 49us; 55us; 61us; 68us; 70us; 76us; 82us; 83us; 85us; 90us; 99us; 100us; 109us; 110us; 111us; 112us; 113us; 116us; 117us; 120us; 121us; 127us; 136us; 145us; 154us; 163us; 172us; 184us; 197us; 203us; 209us; 215us; 221us; 227us; 233us; 239us; 245us; 251us; 257us; 263us; 269us; 278us; 279us; 280us; 282us; 288us; 295us; 296us; 300us; 304us; 306us; 308us; 310us; 314us; 318us; 325us; 331us; 337us; 343us; 349us; 355us; 361us; 367us; 373us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 3us; 6us; 1us; 3us; 3us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 4us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16392us; 65535us; 16393us; 16394us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 16408us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; |]
let _fsyacc_reductions ()  =    [| 
# 308 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 317 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                      _1 
                   )
# 57 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : command));
# 328 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                      BooleanGuard(_1,_3) 
                   )
# 68 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : gcommand));
# 340 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : gcommand)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : gcommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                  GCommands(_1,_3) 
                   )
# 69 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : gcommand));
# 352 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                        AssignExpr(_1,_3) 
                   )
# 72 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : command));
# 364 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                                        AssignArray(_1, _3, _6) 
                   )
# 73 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : command));
# 377 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                          Skip 
                   )
# 74 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : command));
# 387 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                          Commands(_1,_3) 
                   )
# 75 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : command));
# 399 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gcommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                   IfStatement(_2) 
                   )
# 76 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : command));
# 410 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gcommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                   DoStatement(_2) 
                   )
# 77 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : command));
# 421 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                      True 
                   )
# 80 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 431 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                       False 
                   )
# 81 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 441 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                        And(_1,_3) 
                   )
# 82 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 453 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                       Or(_1,_3) 
                   )
# 83 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 465 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                        SAnd(_1,_3) 
                   )
# 84 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 477 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                        SOr(_1,_3) 
                   )
# 85 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 489 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                               Neg(_2) 
                   )
# 86 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 500 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           Equal(_1,_3) 
                   )
# 87 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 512 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           NEqual(_1,_3) 
                   )
# 88 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 524 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           Greater(_1,_3) 
                   )
# 89 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 536 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           GreaterEqual(_1,_3) 
                   )
# 90 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 548 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           Less(_1,_3) 
                   )
# 91 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 560 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           LessEqual(_1,_3) 
                   )
# 92 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 572 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                   ParBExpr(_2) 
                   )
# 93 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : bexpr));
# 583 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                      Num(_1) 
                   )
# 96 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
# 594 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                      Var(_1) 
                   )
# 97 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
# 605 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                      Array(_1, _3) 
                   )
# 98 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
# 617 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           PlusExpr(_1,_3) 
                   )
# 99 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
# 629 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           MinusExpr(_1,_3) 
                   )
# 100 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
# 641 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           TimesExpr(_1,_3) 
                   )
# 101 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
# 653 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           DivExpr(_1,_3) 
                   )
# 102 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
# 665 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                           PowExpr(_1,_3) 
                   )
# 103 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
# 677 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                               UPlusExpr(_2) 
                   )
# 104 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
# 688 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                UMinusExpr(_2) 
                   )
# 105 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
# 699 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                                                   ParAExpr(_2) 
                   )
# 106 "C:\Users\simon\Documents\GitHub\CSM\\Task1Parser.fsp"
                 : aexpr));
|]
# 711 "C:\Users\simon\Documents\GitHub\CSM\Task1Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 38;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : command =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
